import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedHashSet;
import java.util.StringTokenizer;
 
public class TestClass {

    private static void solve(FastScanner fs) {
        // add code
        int n = fs.nextInt();
        StringBuilder sb = new StringBuilder();
        int arr[][] = new int[n][n];
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(i == 0 ||  j == 0)
                    arr[i][j] = 1;
            }
        }
        if(n > 1) {
            for(int i=1; i<n; i++) {
                for(int j=1; j<n; j++) {
                    arr[i][j] = arr[i-1][j] + arr[i][j-1];
                }
            }
            sb.append(arr[n-1][n-1]);
        } else {
            sb.append(1);
        }
        sb.append("\n");
        System.out.print(sb.toString());
    }
 
    public static void main(String[] args) {
        FastScanner fs = new FastScanner();
        solve(fs);
    }
 
    static class FastScanner {
        BufferedReader br = null;
        StringTokenizer st;
        
        FastScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }
 
        String next() {
            while(st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt() {
            return Integer.parseInt(next());
        }
 
        long nextLong() {
            return Long.parseLong(next());
        }
 
        double nextDouble() {
            return Double.parseDouble(next());
        }
 
        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch(IOException e) {
                e.printStackTrace();;
            }
            return str;
        }
 
        long[] readArray(int n) {
            long[] arr = new long[n];
            for(int i=0; i<n; i++)
                arr[i] = nextLong();
            return arr;
        } 
    }
}
