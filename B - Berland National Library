import java.io.*;
import java.util.*;

public class B567
{
	public static void main(String[] args) {
		new Thread(null, new Runnable() {
			public void run() {
                solve();
            }
        }, "1", 1 << 26).start();
	}
	static void solve () {
		FastReader fr =new FastReader();	PrintWriter op =new PrintWriter(System.out);
		int n= fr.nextInt();
		int min = 0,  c = 0;
		boolean present[] = new boolean[10000001];
		for(int i =0 ; i < n; i++)
		{
			char ch = fr.next().charAt(0); int m = fr.nextInt();
			if(ch == '-')
			{
				if(!present[m])
				{
					min++;
				}
				else
				{
					c--;
				}
			}
			else
			{
				c++;
				present[m] = true;
			}
			if(c > min)
			{
				min = c;
			}
		}
		op.println(min);
		op.flush();	
		op.close();
	}
	static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br =new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st==null || (!st.hasMoreElements())) 
			{
				try
				{
					st =new StringTokenizer(br.readLine());
				}
				catch(IOException e)
				{
					e.printStackTrace();
				}
				
			}
			return st.nextToken();
		}

		String nextLine() {
			String str ="";

			try
			{
				str =br.readLine();
			}
			catch(IOException e)
			{
				e.printStackTrace();
			}

			return str;
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next()) ;
		}
	}
}


/*
6
+ 12001
- 12001
- 1
- 1200
+ 1
+ 7

[12001]  []  [] [] 

1        0     1      2     

1        1     2      3


3
- 1
- 2
- 3
5
+ 1
- 1
+ 2
+ 3
- 4
2
- 1
- 2
3
- 1
+ 2
- 2
4
+ 1
+ 2
- 1
+ 3
5
+ 1
- 1
+ 2
+ 3
- 4


*/
