import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.List;
import java.util.Scanner;
import java.util.ArrayList;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main
{
    public static void main(String[] args)
    {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        Scanner in = new Scanner(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskB solver = new TaskB();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskB
    {
        static int branch = 0;

        public void solve(int testNumber, Scanner in, PrintWriter out)
        {
            int N = in.nextInt();
            int M = in.nextInt();
            List<Integer>[] G = new ArrayList[N + 1];
            init(G);
            branch = 0;
            while (M-- > 0)
            {
                int a = in.nextInt(), b = in.nextInt();
                G[a].add(b);
                G[b].add(a);
            }
            boolean visited[] = new boolean[N + 1];
            for (int i = 1; i <= N; i++)
            {
                if (G[i].size() > 0 && !visited[i])
                {
                    dfs(i, visited, G);
                    branch--;
                }
            }
            out.println((long) Math.pow(2, branch));
        }

        private void init(List<Integer>[] G)
        {
            for (int i = 0; i < G.length; i++)
            {
                G[i] = new ArrayList<>();
            }
        }

        void dfs(int node, boolean visited[], List<Integer>[] G)
        {
            if (visited[node]) return;

            branch++;
            visited[node] = true;
            for (int neighbour : G[node])
            {
                dfs(neighbour, visited, G);
            }
        }

    }
}

