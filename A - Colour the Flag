import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class ColorTheFlag {
    public static void main(String[] args) {
        FastScanner fs = new FastScanner();
        int T = fs.nextInt();
        for(int tt=0;tt<T;tt++){
            int h = fs.nextInt(), w = fs.nextInt();
            boolean w1 = false, w2 = false;
            char[][] board = new char[h][];
            for(int i=0;i<h;i++){
                board[i] = fs.next().toCharArray();
            }
            for(int x=0;x < w; x++){
                for(int y = 0;y < h; y++){
                    if(board[y][x] != '.'){
                        if(board[y][x] == 'W' == ((x + y) % 2 == 0)){
                            w1 = true;
                        }
                        else{
                            w2 = true;
                        }
                    }
                }
            }
            if(w1 && w2){
                System.out.println("NO");
            }
            else{
                System.out.println("YES");
                if(w1){
                    for(int y = 0; y < h; y++){
                        for(int x = 0; x < w; x++){
                            System.out.print((x + y) % 2 == 0 ? "W" : "R");
                        }
                        System.out.println();
                    }
                }
                else{
                    for(int y = 0; y < h; y++){
                        for(int x = 0; x < w; x++){
                            System.out.print((x + y) % 2 != 0 ? "W" : "R");
                        }
                        System.out.println();
                    }
                }
            }
        }
    }

    public static boolean isPrime(long n) {
        if (n < 2) return false;
        if (n == 2 || n == 3) return true;
        if (n % 2 == 0 || n % 3 == 0) return false;
        long sqrtN = (long) Math.sqrt(n) + 1;
        for (long i = 6L; i <= sqrtN; i += 6) {
            if (n % (i - 1) == 0 || n % (i + 1) == 0) return false;
        }
        return true;
    }

    public static long gcd(long a, long b) {
        if (a > b)
            a = (a + b) - (b = a);
        if (a == 0L)
            return b;
        long gcd = gcd(b % a, a);
        return gcd;
    }

    static void sort(int[] a) {
        ArrayList<Integer> l = new ArrayList<>();
        for (int i : a) l.add(i);
        Collections.sort(l);
        for (int i = 0; i < a.length; i++) a[i] = l.get(i);
    }

    static class FastScanner {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer("");

        public String next() {
            while (!st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        float nextFloat() {
            return Float.parseFloat(next());
        }

        int[] readArray(int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++) a[i] = nextInt();
            return a;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        boolean nextBoolean() {
            return Boolean.parseBoolean(next());
        }

        Double nextDouble() {
            return Double.parseDouble(next());
        }
    }
}
